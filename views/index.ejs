<!DOCTYPE html>
<html>
<head>
  <title>Music Portal</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" type="text/css" href="/css/music.css" >
</head>

<body>
  <!-- 🎧 Header Section -->
  <header class="header">
    <!-- 🔙 Back to Main Menu -->
    <div class="back-button">
      <form action="/" method="GET">
        <button>⬅️ Back to Main Menu</button>
      </form>
    </div>
    <!-- 🎶 Now Playing -->
    <div class="now-playing">
      <h3>Now Playing</h3>
      <p id="nowPlayingText">Loading...</p>
      <span class="playing-indicator" style="display:none;"></span>
    </div>
    <!-- 🔧 Playback Controls -->
    <div class="box controls">
      <form action="/prev-track" method="POST" style="display:inline;">
        <button>⏮️ Previous</button>
      </form>
      <form action="/toggle-pause" method="GET" style="display:inline;">
        <button>⏯️ Pause/Resume</button>
      </form>
      <form action="/next-track" method="POST" style="display:inline;">
        <button>⏭️ Next</button>
      </form>
      <div style="margin-top: 1em;">
        <h3>🎚 Volume Control</h3>
        <form action="/volume/up" method="POST" style="display: inline;">
          <button type="submit">🔊 Volume +</button>
        </form>
        <form action="/volume/down" method="POST" style="display: inline;">
          <button type="submit">🔉 Volume -</button>
        </form>
        </div>
    </div>

    <!-- 🔊 Volume & Playlist Controls -->


      <div class="playlist-controls">
        <form action="/queue/clear" method="POST">
          <button type="submit" class="clear-btn">🧹 Clear Queue</button>
        </form>
        <!-- 💾 Save Playlist -->
        <button id="savePlaylistBtn">💾 Save Playlist</button>

        <!-- 📝 Playlist Name Dialog -->
        <div id="playlistDialog" style="display:none;" >
          <label for="playlistName">Enter playlist name:</label>
          <input type="text" id="playlistName" />
          <button id="confirmSaveBtn">✅ Save</button>
          <button id="cancelSaveBtn">❌ Cancel</button>
        </div>
      </div>

      <!-- 📂 Open Playlist -->
      <button id="openBtn">📂 Open Playlist</button>
      <div id="playlistSelector" style="display:none;">
        <label for="playlistDropdown">Select a playlist:</label>
        <select id="playlistDropdown"></select>
        <button id="loadSelectedBtn">✅ Load</button>
        <button id="cancelLoadBtn">❌ Cancel</button>
      </div>

      <!-- ▶️ Play Queue -->
      <form action="/play-queue" method="POST" onsubmit="setTimeout(() => location.reload(), 500);">
        <button type="submit">▶️ Play Queue</button>
      </form>
    </div>

    <!-- 🌡️ CPU Temp & Errors -->
    <p><strong>CPU Temp:</strong> <%= tempOutput %></p>
    <div class="error-area">
      <% if (currentTrack.title !== 'No track playing' && typeof playbackError !== 'undefined') { %>
        <p class="error-msg">⚠️ <%= playbackError %></p>
      <% } %>
    </div>
  </header>

  <!-- 🗂️ Two-Column Main Layout -->
  <div class="main-layout">
    <!-- 🎵 Track List (Left Column) -->
    <div class="track-list box">
      
      <% if (typeof dir !== 'undefined' && dir !== '') { %>
        <h3>Tracks</h3>
        <form action="/music/up" method="GET">
          <button id="backBtn" class="back-btn" >⬅️ Back</button>
        </form>
        <ul>
        <% entries.forEach(entry => { %>
          <% if (entry.isDir) { %>
            <!-- Folder: link to navigate -->
            <div class="entry folder">
              <a href="/music?dir=<%= entry.relPath %>"><%= entry.name %></a>
            </div>
          <% } else { %>
            <!-- File: form to enqueue -->
            <div class="entry track">
              <form action="/enqueue" method="POST">
                <input type="hidden" name="track" value="<%= entry.relPath %>">
                <button type="submit"><%= entry.name %></button>
              </form>
            </div>
          <% } %>
        <% }) %>

          <!-- <% entries.forEach(entry => { %>
            <li>
              <%= entry.name %>
              <form class="enqueue-form" style="display:inline;">
                <input type="hidden" name="file" value="<%= entry.relPath %>">
                <button class="enqueue-btn">➕ Add to Queue</button>
              </form>
            </li>
          <% }) %> -->
        </ul>
      <% } else { %>
        <h3>Folders</h3>
        <ul>
          <% entries.forEach(entry => { %>
            <li>
              <a href="/music?dir=<%= encodeURIComponent(entry.relPath) %>">
                📁 <%= entry.name %>
              </a>
            </li>
          <% }) %>
        </ul>
      <% } %>
    </div>

    <!-- 📋 Queue List (Right Column) -->
    <div class="queue-list box">
      <h3>Current Queue</h3>
      <ul>
        <% queue.forEach((track, index) => { %>
          <li>
            <%= track %>
            <form action="/queue/remove/<%= index %>" method="POST" style="display:inline;">
              <button class="remove-btn">🗑️ Remove</button>
            </form>
          </li>
        <% }) %>
      </ul>
    </div>
  </div>


  <script>
  
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM fully loaded, starting polling...');
    setTimeout(refreshNowPlaying, 300);
    setInterval(refreshNowPlaying, 5000);
  });

  async function refreshNowPlaying() {
    try {
      const res = await fetch('/now-playing');
      const track = await res.json();

      const nowPlayingText = document.getElementById('nowPlayingText');
      const indicator = document.querySelector('.playing-indicator');

      if (!nowPlayingText) return console.warn('nowPlayingText not found');

      nowPlayingText.innerText = `${track.artist} - ${track.title}`;

      if (track.title !== 'No track playing') {
        indicator.style.display = 'inline-block';
        indicator.classList.add('active');
      } else {
        indicator.style.display = 'none';
        indicator.classList.remove('active');
      }
    } catch (err) {
      console.error('Failed to fetch now playing:', err);
    }};

    document.querySelectorAll('.enqueue-form').forEach(form => {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = new FormData(form);
      const url = new URL('/enqueue', window.location.origin);

      for (const [key, value] of formData.entries()) {
        url.searchParams.append(key, value);
      }

      try {
        const res = await fetch(url);
        const result = await res.json();

        if (result.success) {
          console.log('Track enqueued:', result.track);
          refreshQueueList(); // ✅ Call frontend function to update queue
        } else {
          alert(`Error: ${result.message}`);
        }
      } catch (err) {
        console.error('Enqueue failed:', err);
      }
    });
});


  async function refreshQueueList() {
  try {
    const res = await fetch('/queue');
    const result = await res.json();

    if (result.success) {
      const queueList = document.querySelector('.queue-list ul');
      queueList.innerHTML = ''; // Clear current list

      result.queue.forEach((track, index) => {
        const li = document.createElement('li');
        li.innerHTML = `
          ${track}
          <form action="/queue/remove/${index}" method="POST" style="display:inline;">
            <button class="remove-btn">🗑️ Remove</button>
          </form>
        `;
        queueList.appendChild(li);
      });
    } else {
      console.error('Failed to refresh queue:', result.message);
    }
  } catch (err) {
    console.error('Error fetching queue:', err);
  }
}

document.addEventListener('DOMContentLoaded', () => {
  const backBtn = document.getElementById('backBtn');
  if (backBtn) {
    backBtn.onclick = async () => {
      const res = await fetch('/go-back');
      const result = await res.json();
      // Refresh your UI with result.contents
    };
  } else {
    console.warn('Back button not found in DOM');
  }
});
  
  document.getElementById('openBtn').onclick = async () => {
    const res = await fetch('/playlist/list');
    const result = await res.json();
    console.log("Generating dropdown")
    if (result.success) {
      const dropdown = document.getElementById('playlistDropdown');
      dropdown.innerHTML = ''; // Clear previous options

      result.playlists.forEach(name => {
        const option = document.createElement('option');
        option.value = name;
        option.textContent = name;
        dropdown.appendChild(option);
      });

      document.getElementById('playlistSelector').style.display = 'block';
    } else {
      alert('Failed to load playlist list');
    }
  };

  document.getElementById('savePlaylistBtn').onclick = async () => {
    document.getElementById('playlistDialog').style.display = 'block';
  };

  document.getElementById('loadSelectedBtn').onclick = async () => {
    const name = document.getElementById('playlistDropdown').value;
    const res = await fetch(`/load-playlist/${encodeURIComponent(name)}`);
    const result = await res.json();

    if (result.success) {
      alert(`Loaded ${name} into queue!`);
      location.reload(); // Refresh to show updated queue
    } else {
      alert(`Error: ${result.message}`);
    }
  };

  document.getElementById('cancelLoadBtn').onclick = () => {
    document.getElementById('playlistSelector').style.display = 'none';
  };
  document.getElementById('backBtn').onclick = async () => {
  const res = await fetch('/go-back');
  const result = await res.json();
  // Refresh your UI with result.contents
};
// document.addEventListener('DOMContentLoaded', () => {
//     console.log('DOM fully loaded, starting polling...');
//     setTimeout(refreshNowPlaying, 300);
//     setInterval(refreshNowPlaying, 5000);
//   });

//   async function refreshNowPlaying() {
//     try {
//       const res = await fetch('/now-playing');
//       const track = await res.json();

//       const nowPlayingText = document.getElementById('nowPlayingText');
//       const indicator = document.querySelector('.playing-indicator');

//       if (!nowPlayingText) return console.warn('nowPlayingText not found');

//       nowPlayingText.innerText = `${track.artist} - ${track.title}`;

//       if (track.title !== 'No track playing') {
//         indicator.style.display = 'inline-block';
//         indicator.classList.add('active');
//       } else {
//         indicator.style.display = 'none';
//         indicator.classList.remove('active');
//       }
//     } catch (err) {
//       console.error('Failed to fetch now playing:', err);
//     }
//   }
//   async function refreshNowPlaying() {
//   try {
//     const res = await fetch('/now-playing');
//     const track = await res.json();

//     const nowPlayingText = document.getElementById('nowPlayingText');
//     const indicator = document.querySelector('.playing-indicator');
//     console.log("Refreshing Now Playing");
//     console.log('Frontend received track:', track);
//     nowPlayingText.innerText = `${track.artist} - ${track.title}`;

//     if (track.title !== 'No track playing') {
//       indicator.style.display = 'inline-block';
//       indicator.classList.add('active');
//     } else {
//       indicator.style.display = 'none';
//       indicator.classList.remove('active');
//     }
//   } catch (err) {
//     console.error('Failed to fetch now playing:', err);
//   }
// };
// document.addEventListener('DOMContentLoaded', () => {
//   console.log('DOM fully loaded, starting polling...');
//   setTimeout(refreshNowPlaying, 300); // Let backend settle
//   setInterval(refreshNowPlaying, 5000);
// });

document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('openBtn').onclick = async () => {
      const res = await fetch('/playlist/list');
      const result = await res.json();
      console.log("getting playlists...")

      if (result.success) {
        const dropdown = document.getElementById('playlistDropdown');
        dropdown.innerHTML = ''; // Clear previous options

        result.playlists.forEach(name => {
          const option = document.createElement('option');
          option.value = name;
          option.textContent = name;
          dropdown.appendChild(option);
        });

        document.getElementById('playlistSelector').style.display = 'block';
      } else {
        alert('Failed to load playlist list');
      }
    };

    document.getElementById('loadSelectedBtn').onclick = async () => {
      const name = document.getElementById('playlistDropdown').value;
      const res = await fetch(`/load-playlist/${encodeURIComponent(name)}`);
      const result = await res.json();

      if (result.success) {
        alert(`Loaded ${name} into queue!`);
        location.reload();
      } else {
        alert(`Error: ${result.message}`);
      }
    };

  document.getElementById('confirmSaveBtn').onclick = async () => {
    const name = document.getElementById('playlistName').value;
    console.log("Saving");
    if (name) {
      const response = await fetch('/playlist/save', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name })
      });

      const result = await response;
      alert('Playlist saved!');
    }
  };


    document.getElementById('cancelLoadBtn').onclick = () => {
      document.getElementById('playlistSelector').style.display = 'none';
    };
  });
</script>
</body>
</html>

